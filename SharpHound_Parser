#!/bin/bash

while true; do
	echo "Please select an option:"
	echo "1. Users"
	echo "2. Computers"
	echo "3. Groups"
	echo "4. Exit"

	while true; do
		echo
		read -p "Enter option number: " option
		if [[ "$option" =~ ^[0-9]+$ ]]; then
			break
		else
			echo
			echo "Error: Invalid input. Please enter an integer."
		fi
	done

	case $option in
		1)
			echo "Please select an option:"
			echo "1. Show All Users"
			echo "2. Show All Enabled Users"
			echo "3. Show All Disabled Users"
			echo "4. Show Enabled Users with Description"
			echo "5. Show Disabled Users with Description"
			echo "6. Last Login"
			echo "7. No Login Since Before Password Reset"
			echo "8. Kerberoastable Accounts"
			echo "9. User Permissiosn"

			while true; do
				echo 
				read -p "Enter option number: " option
				if [[ "$option" =~ ^[0-9]+$ ]]; then
					break
				else
					echo ""
					echo "Error: Invalid input. Please enter an integer."
				fi
			done

			case $option in
				1)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == true ) | .name'
					;;
				2)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == true ) | .name'
					;;
				3)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == false ) | .name'
					;;
				4)     	
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == true ) | select( .description != null ) | .name + "  :  " + .description'
					;;
				5)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == false ) | select( .description != null ) | .name + "  :  " + .description'
					;;
				6)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == true ) | .name + "  :  " + (.lastlogontimestamp|tostring) '
					;;
				7)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .enabled == true ) | select( .pwdlastset > .lastlogontimestamp ) | .name + "  :  " + (.lastlogontimestamp|tostring) '
					;;
				8)
					echo ""
					cat *_users.json | jq '.data[].Properties | select( .serviceprincipalnames != [] ) | .name'
					;;
				9)
					echo ""
					cat *_users.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[32m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
					;;
				*)
					echo ""
					echo "Error: Invalid option selected."
					;;
			esac
			;;
		2)
			echo "Please select an option:"
			echo "1. Show All Operating Systems"
			echo "2. Show All Operating Systems Except _______"
			echo "3. Show Last Time Computer Powered On"
			echo "4. What Computers Were Logged In Within __ Days"
			echo "5. Computer Permissions"

			while true; do
				echo 
				read -p "Enter option number: " option
				if [[ "$option" =~ ^[0-9]+$ ]]; then
					break
				else
					echo ""
					echo "Error: Invalid input. Please enter an integer."
				fi
			done

			case $option in
				1)
					echo ""
					cat *_computers.json | jq '.data[].Properties | select ( .operatingsystem != null ) | .name + "  :  " + .operatingsystem'
					;;
				2)
					echo ""
					cat *_computers.json | jq '.data[].Properties | select ( .operatingsystem != null ) | select ( .operatingsystem != "Windows 10 Pro" ) | .name + "  :  " + .operatingsystem'
					;;
				3)	
					echo ""
					cat *_computers.json | jq '.data[].Properties | .name + "  :  " + (.lastlogontimestamp|todate)'
					;;
				4)     	
					while true; do
						echo 
						read -p "How many days back are you looking? " days
						if [[ "$days" =~ ^[0-9]+$ ]]; then
							break
						else
						echo ""
						echo "Error: Invalid input. Please enter an integer."
						fi
					done
					days=$((days))
					echo ""
					cat *_computers.json | jq --argjson days "$days" '.data[].Properties | select( .lastlogontimestamp > (86400 * $days)) | .name + " was online " + ((now - .lastlogontimestamp) / 86400|round|tostring) + " Days Ago"'
					;;
				5)
					echo ""
					cat *_computers.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[32m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
					;;
				*)
					echo ""	
					echo "Error: Invalid option selected."
					;;
			esac

			;;

		3)
			echo "Please select an option:"
			echo "1. Group Permissions"

			while true; do
				echo 
				read -p "Enter option number: " option
				if [[ "$option" =~ ^[0-9]+$ ]]; then
					break
				else
					echo ""
					echo "Error: Invalid input. Please enter an integer."
				fi
			done

			case $option in
				1)
					echo ""
					cat *_groups.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[32m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
					;;
				*)
					echo ""	
					echo "Error: Invalid option selected."
					;;
			esac

			;;


		4)
			echo "Thank you for using SharpHound Parser!"
			exit
			;;

		*)
			echo "Error: Invalid option selected."
			;;
	esac
done
