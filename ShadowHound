#!/bin/bash

Red="\e[31m"
Blue="\e[34m"
NoColor="\e[0m"

echo "   _____ __              __               __  __                       __"
echo "  / ___// /_   ____ ____/ /____ _      __/ / / /____  __  ______  ____/ /"
echo "  \__ \/ __ \/ __  / __  / ___ \ | /| / / /_/ / ___ \/ / / / __ \/ __  / "
echo " ___/ / / / / /_/ / /_/ / /__/ / |/ |/ / __  / /__/ / /_/ / / / / /_/ /  "
echo "/____/_/ /_/\___^_\____/\_____/|__/|__/_/ /_/\_____/\____/_/ /_/\____/   "
echo ""
echo ""


while true; do
	echo "Which category would you like to parse?"
	echo "1. Users"
	echo "2. Computers"
	echo "3. Groups"
	echo "4. Exit"

	while true; do
		echo
		printf "${Blue}ShadowHound${NoColor} > " && read option
		if [[ "$option" =~ ^[1-4]$ ]]; then
			echo ""
			break	
		else
			echo -e "${Red}Error:${NoColor} Invalid input. Select an option 1-4"
		fi
	done
	case $option in
		1)	
			a="1"
			while [[ ${a} == "1" ]]; do
				echo "What user data would you like to parse?"
				echo "1.  Show All Users"
				echo "2.  Show All Enabled Users"
				echo "3.  Show All Disabled Users"
				echo "4.  Show Enabled Users with Description"
				echo "5.  Show Disabled Users with Description"
				echo "6.  Last Login"
				echo "7.  No Login Since Before Password Reset"
				echo "8.  Kerberoastable Accounts"
				echo "9.  User Permissions"
				echo "10. Back"

				while true; do
					echo 
					printf "${Blue}ShadowHound${NoColor} > " && read option
					if [ $option -ge 1 ] && [ $option -le 10 ]; then
						break
					else
						echo -e "${Red}Error:${NoColor} Invalid input. Select an Option 1-10"
					fi
				done

				case $option in
					1)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == true ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m "'
						echo ""
						;;
					2)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == true ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m "'
						echo ""
						;;
					3)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == false ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m "'
						echo ""
						;;
					4)     	
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == true ) | select( .description != null ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m: " + .description' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					5)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == false ) | select( .description != null ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m: " + .description' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					6)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == true ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m " + "  :  " + (.lastlogontimestamp|tostring) ' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					7)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .enabled == true ) | select( .pwdlastset > .lastlogontimestamp ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m " + "  :  " + (.lastlogontimestamp|tostring) ' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					8)
						echo ""
						cat *_users.json | jq -r '.data[].Properties | select( .serviceprincipalnames != [] ) | "\u001b[38;2;152;251;152m" + .name + "\u001b[0m "'
						echo ""
						;;
					9)
						echo ""
						cat *_users.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[38;2;152;251;152m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					
					10)
						a="0"
						echo ""
						;;
				esac
			done
			;;

		2)
			a="1"
			while [[ ${a} == "1" ]]; do
				echo "What computer data would you like to parse? "
				echo "1. Show All Operating Systems"
				echo "2. Show All Operating Systems Except _______"
				echo "3. Show Last Time Computer Powered On"
				echo "4. What Computers Were Logged In Within __ Days"
				echo "5. Computer Permissions"
				echo "6. Back"
				while true; do
					echo 
					printf "${Blue}ShadowHound${NoColor} > " && read option
					if [[ "$option" =~ ^[1-6]$ ]]; then
						break
					else
						echo -e "${Red}Error:${NoColor} Invalid input. Enter a number 1-6"
					fi
				done

				case $option in
					1)
						echo ""
						cat *_computers.json | jq -r '.data[].Properties | select ( .operatingsystem != null ) | "\u001b[38;2;152;251;152m" + .name  + "\u001b[0m "+ "  :  " + .operatingsystem' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					2)
						echo ""
						cat *_computers.json | jq -r '.data[].Properties | select ( .operatingsystem != null ) | select ( .operatingsystem != "Windows 10 Pro" ) | "\u001b[38;2;152;251;152m" + .name  + "\u001b[0m "+ "  :  " + .operatingsystem' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					3)	
						echo ""
						cat *_computers.json | jq -r '.data[].Properties | "\u001b[38;2;152;251;152m" + .name  + "\u001b[0m "+ "  :  " + (.lastlogontimestamp|todate)' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					4)     	
						while true; do
							echo 
							read -p "How many days back are you looking? " days
							if [[ "$days" =~ ^[0-9]+$ ]]; then
								break
							else
							echo -e "${Red}Error:${NoColor} Invalid input. Please enter an integer."
							fi
						done
						days=$((days))
						echo ""
						cat *_computers.json | jq -r --argjson days "$days" '.data[].Properties | select( .lastlogontimestamp > (86400 * $days)) | "\u001b[38;2;152;251;152m" + .name  + "\u001b[0m: "+ " was online " + ((now - .lastlogontimestamp) / 86400|round|tostring) + " Days Ago"' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					5)
						echo ""
						cat *_computers.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[38;2;152;251;152m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					6)
						a="0"
						echo ""
						;;
				esac

				done
				;;

		3)
			a="1"
			while [[ ${a} == "1" ]]; do

				echo "What group data would you like to parse?"
				echo "1. Group Permissions"
				echo "2. Back"
				while true; do
					echo 
					printf "${Blue}ShadowHound${NoColor} > " && read option
					if [[ "$option" =~ ^[1-2]$ ]]; then
						break
					else
						echo -e "${Red}Error:${NoColor} Invalid input. Enter a number 1-2"
					fi
				done

				case $option in
					1)
						echo ""
						cat *_groups.json | jq -r '.data[] | select( .Aces[].RightName != null ) | "\u001b[38;2;152;251;152m" + .Properties.name + "\u001b[0m: " + (.Aces | map(.RightName) | join(", "))' | sort -u | awk -F: '{printf("%s:%s\n", $1, $2)}' | column -t -s ':'
						echo ""
						;;
					2)
						a="0"
						echo ""
						;;
				esac

			done
			;;


		4)
			echo "Thank you for using ShadowHound!"
			exit
			;;

	esac
done
